import sys
import argparse
import os
import cProfile

import toml
from simple_parsing import ArgumentParser, field
import dataclasses
from typing import Any, List, Tuple, Type, Union

from .index import Index

#TODO add view parameters
#prefix: required positional
#rest are optional arguments?
#genome
#coords
#max_chr_bins
#bookmarks

@dataclasses.dataclass
class View:
    """Display panagram viewer"""

    #Panagram index directory
    index_dir: str = field(positional=True, metavar="index_dir")

    #Initial anchor genome (optional)
    genome: str = field(positional=True, nargs="?", metavar="genome")

    #Initial chromosome (optional)
    chrom: str = field(positional=True, nargs="?", metavar="chrom")

    #Initial start coordinate (optional)
    start: int = field(positional=True, nargs="?", metavar="start")

    #Initial end coordinate (optional)
    end: int = field(positional=True, nargs="?", metavar="end")

    #Run server in production mode (important for a public-facing server)
    ndebug: bool = field(action="store_true")

    #Server port
    port: str = field(default="8050")

    #Server address
    host: str = field(default="127.0.0.1")

    #A local URL prefix to use app-wide (passed to Dash.dash(url_base_pathname=...))
    url_base: str = field(default="/")

    #Max number of bins on chromosome tab
    max_chr_bins: int = field(default=350)

    #Bed file with bookmarked regions 
    bookmarks: str = field(default=None)

    def run(self):
        from .view import view
        view(self)


@dataclasses.dataclass
class Bitdump:
    """Query pan-kmer bitmap generated by "panagram index" """

    index_dir: str = field(positional=True, metavar="index_dir")
    """Panagram index directory"""

    genome: str = field(positional=True, metavar="genome")
    chrom: str = field(positional=True, metavar="chromosome")
    start: int = field(positional=True, nargs="?", metavar="start")
    end: int = field(positional=True, nargs="?", metavar="end")

    step: int = field(positional=True, default=1, nargs="?", metavar="step")
    """Spacing between output kmers (optimized for multiples of 100)"""

    verbose: bool = field(alias=["-v"], action="store_true")
    """Output the full bitmap"""

    def run(self):
        idx = Index(self.index_dir)
        bits = idx.query_bitmap(self.genome, self.chrom, self.start, self.end, self.step)

        if self.verbose:
            print(" ".join(idx.genomes))
            for i in range(len(bits)):
                print(" ".join(bits[i].astype(str)))
        else:
            print(bits)

        idx.close()

@dataclasses.dataclass
class Annotate:
    """(Re-)annotate an existing anchored genome using a GFF file """

    index_dir: str = field(positional=True, metavar="index_dir")
    """Panagram index directory"""

    genome: str = field(positional=True, metavar="genome_name")

    gff_file: str = field(positional=True, metavar="gff_file")
    nogene: bool = field(action="store_true")
    
    def run(self):
        idx = Index(self.index_dir)
        idx[self.genome].run_annotate(self.gff_file,nogene=self.nogene)
        idx.close()

@dataclasses.dataclass
class Main:
    """Alignment-free pan-genome viewer

Subcommands:
    index    Anchor KMC bitvectors to reference FASTA files
    view     Display panagram viewer in a browser window
    annotate Create or replace GFF annotation for anchored genome
    bitdump  Query pan-kmer bitmap via the commandline"""

    cmd: Union[View, Index, Bitdump, Annotate]
    cprof: str = field(default=None, help=argparse.SUPPRESS)

    def run(self):
        return self.cmd.run()

def parse_coords(coords):
    genome, chrom, coords = coords.split(":")
    start, end = map(int, coords.split("-"))
    return genome, chrom, start, end

def comma_split(s):
    return s.split(",")

def main():
    parser = ArgumentParser(add_config_path_arg=True)
    parser.add_arguments(Main, dest="main")
    args = parser.parse_args()
    if args.main.cprof is None:
        args.main.run()
    else:
        cProfile.runctx("args.run()",
             {},{"args" : args},
             args.main.cprof)

